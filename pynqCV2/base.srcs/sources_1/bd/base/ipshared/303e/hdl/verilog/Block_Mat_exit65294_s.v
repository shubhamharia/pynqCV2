// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_Mat_exit65294_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rows_V,
        cols_V,
        channels_V,
        col_packets_cast_out_out_din,
        col_packets_cast_out_out_full_n,
        col_packets_cast_out_out_write,
        col_packets_out_out_din,
        col_packets_out_out_full_n,
        col_packets_out_out_write,
        ap_return
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] rows_V;
input  [31:0] cols_V;
input  [31:0] channels_V;
output  [30:0] col_packets_cast_out_out_din;
input   col_packets_cast_out_out_full_n;
output   col_packets_cast_out_out_write;
output  [31:0] col_packets_out_out_din;
input   col_packets_out_out_full_n;
output   col_packets_out_out_write;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg col_packets_cast_out_out_write;
reg col_packets_out_out_write;
reg[31:0] ap_return;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    col_packets_cast_out_out_blk_n;
wire    ap_CS_fsm_state6;
reg    col_packets_out_out_blk_n;
reg    ap_block_state1;
wire    ap_CS_fsm_state5;
reg    ap_block_state6;
wire   [31:0] grp_fu_98_p0;
wire   [31:0] grp_fu_98_p1;
wire   [33:0] grp_fu_98_p2;
wire  signed [31:0] grp_fu_124_p0;
reg    grp_fu_98_ce;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_124_p2;
reg    grp_fu_124_ce;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg   [31:0] ap_return_preg;
reg   [9:0] ap_NS_fsm;
wire   [33:0] grp_fu_98_p00;
wire   [33:0] grp_fu_98_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
#0 ap_return_preg = 32'd0;
end

filter2D_f_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 34 ))
filter2D_f_mul_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_98_p0),
    .din1(grp_fu_98_p1),
    .ce(grp_fu_98_ce),
    .dout(grp_fu_98_p2)
);

filter2D_f_mul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
filter2D_f_mul_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_124_p0),
    .din1(rows_V),
    .ce(grp_fu_124_ce),
    .dout(grp_fu_124_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_preg <= grp_fu_124_p2;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return = grp_fu_124_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        col_packets_cast_out_out_blk_n = col_packets_cast_out_out_full_n;
    end else begin
        col_packets_cast_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((col_packets_out_out_full_n == 1'b0) | (col_packets_cast_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        col_packets_cast_out_out_write = 1'b1;
    end else begin
        col_packets_cast_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        col_packets_out_out_blk_n = col_packets_out_out_full_n;
    end else begin
        col_packets_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((col_packets_out_out_full_n == 1'b0) | (col_packets_cast_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        col_packets_out_out_write = 1'b1;
    end else begin
        col_packets_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (~((col_packets_out_out_full_n == 1'b0) | (col_packets_cast_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)))) begin
        grp_fu_124_ce = 1'b1;
    end else begin
        grp_fu_124_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_98_ce = 1'b1;
    end else begin
        grp_fu_98_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if ((~((col_packets_out_out_full_n == 1'b0) | (col_packets_cast_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state6 = ((col_packets_out_out_full_n == 1'b0) | (col_packets_cast_out_out_full_n == 1'b0));
end

assign col_packets_cast_out_out_din = {{grp_fu_98_p2[32:2]}};

assign col_packets_out_out_din = {{grp_fu_98_p2[33:2]}};

assign grp_fu_124_p0 = {{grp_fu_98_p2[33:2]}};

assign grp_fu_98_p0 = grp_fu_98_p00;

assign grp_fu_98_p00 = channels_V;

assign grp_fu_98_p1 = grp_fu_98_p10;

assign grp_fu_98_p10 = cols_V;

endmodule //Block_Mat_exit65294_s
