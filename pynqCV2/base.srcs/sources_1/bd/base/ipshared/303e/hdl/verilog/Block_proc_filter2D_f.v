// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_proc_filter2D_f (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        r11_V,
        r12_V,
        r13_V,
        r21_V,
        r22_V,
        r23_V,
        r31_V,
        r32_V,
        r33_V,
        kernel_val_0_V_0_out_din,
        kernel_val_0_V_0_out_full_n,
        kernel_val_0_V_0_out_write,
        kernel_val_0_V_1_out_din,
        kernel_val_0_V_1_out_full_n,
        kernel_val_0_V_1_out_write,
        kernel_val_0_V_2_out_din,
        kernel_val_0_V_2_out_full_n,
        kernel_val_0_V_2_out_write,
        kernel_val_1_V_0_out_din,
        kernel_val_1_V_0_out_full_n,
        kernel_val_1_V_0_out_write,
        kernel_val_1_V_1_out_din,
        kernel_val_1_V_1_out_full_n,
        kernel_val_1_V_1_out_write,
        kernel_val_1_V_2_out_din,
        kernel_val_1_V_2_out_full_n,
        kernel_val_1_V_2_out_write,
        kernel_val_2_V_0_out_din,
        kernel_val_2_V_0_out_full_n,
        kernel_val_2_V_0_out_write,
        kernel_val_2_V_1_out_din,
        kernel_val_2_V_1_out_full_n,
        kernel_val_2_V_1_out_write,
        kernel_val_2_V_2_out_din,
        kernel_val_2_V_2_out_full_n,
        kernel_val_2_V_2_out_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] r11_V;
input  [31:0] r12_V;
input  [31:0] r13_V;
input  [31:0] r21_V;
input  [31:0] r22_V;
input  [31:0] r23_V;
input  [31:0] r31_V;
input  [31:0] r32_V;
input  [31:0] r33_V;
output  [24:0] kernel_val_0_V_0_out_din;
input   kernel_val_0_V_0_out_full_n;
output   kernel_val_0_V_0_out_write;
output  [24:0] kernel_val_0_V_1_out_din;
input   kernel_val_0_V_1_out_full_n;
output   kernel_val_0_V_1_out_write;
output  [24:0] kernel_val_0_V_2_out_din;
input   kernel_val_0_V_2_out_full_n;
output   kernel_val_0_V_2_out_write;
output  [24:0] kernel_val_1_V_0_out_din;
input   kernel_val_1_V_0_out_full_n;
output   kernel_val_1_V_0_out_write;
output  [24:0] kernel_val_1_V_1_out_din;
input   kernel_val_1_V_1_out_full_n;
output   kernel_val_1_V_1_out_write;
output  [24:0] kernel_val_1_V_2_out_din;
input   kernel_val_1_V_2_out_full_n;
output   kernel_val_1_V_2_out_write;
output  [24:0] kernel_val_2_V_0_out_din;
input   kernel_val_2_V_0_out_full_n;
output   kernel_val_2_V_0_out_write;
output  [24:0] kernel_val_2_V_1_out_din;
input   kernel_val_2_V_1_out_full_n;
output   kernel_val_2_V_1_out_write;
output  [24:0] kernel_val_2_V_2_out_din;
input   kernel_val_2_V_2_out_full_n;
output   kernel_val_2_V_2_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg kernel_val_0_V_0_out_write;
reg kernel_val_0_V_1_out_write;
reg kernel_val_0_V_2_out_write;
reg kernel_val_1_V_0_out_write;
reg kernel_val_1_V_1_out_write;
reg kernel_val_1_V_2_out_write;
reg kernel_val_2_V_0_out_write;
reg kernel_val_2_V_1_out_write;
reg kernel_val_2_V_2_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    kernel_val_0_V_0_out_blk_n;
reg    kernel_val_0_V_1_out_blk_n;
reg    kernel_val_0_V_2_out_blk_n;
reg    kernel_val_1_V_0_out_blk_n;
reg    kernel_val_1_V_1_out_blk_n;
reg    kernel_val_1_V_2_out_blk_n;
reg    kernel_val_2_V_0_out_blk_n;
reg    kernel_val_2_V_1_out_blk_n;
reg    kernel_val_2_V_2_out_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((kernel_val_2_V_2_out_full_n == 1'b0) | (kernel_val_2_V_1_out_full_n == 1'b0) | (ap_start == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_2_out_full_n == 1'b0) | (kernel_val_2_V_1_out_full_n == 1'b0) | (ap_start == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_2_out_full_n == 1'b0) | (kernel_val_2_V_1_out_full_n == 1'b0) | (ap_start == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_val_0_V_0_out_blk_n = kernel_val_0_V_0_out_full_n;
    end else begin
        kernel_val_0_V_0_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_2_out_full_n == 1'b0) | (kernel_val_2_V_1_out_full_n == 1'b0) | (ap_start == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_val_0_V_0_out_write = 1'b1;
    end else begin
        kernel_val_0_V_0_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_val_0_V_1_out_blk_n = kernel_val_0_V_1_out_full_n;
    end else begin
        kernel_val_0_V_1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_2_out_full_n == 1'b0) | (kernel_val_2_V_1_out_full_n == 1'b0) | (ap_start == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_val_0_V_1_out_write = 1'b1;
    end else begin
        kernel_val_0_V_1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_val_0_V_2_out_blk_n = kernel_val_0_V_2_out_full_n;
    end else begin
        kernel_val_0_V_2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_2_out_full_n == 1'b0) | (kernel_val_2_V_1_out_full_n == 1'b0) | (ap_start == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_val_0_V_2_out_write = 1'b1;
    end else begin
        kernel_val_0_V_2_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_val_1_V_0_out_blk_n = kernel_val_1_V_0_out_full_n;
    end else begin
        kernel_val_1_V_0_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_2_out_full_n == 1'b0) | (kernel_val_2_V_1_out_full_n == 1'b0) | (ap_start == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_val_1_V_0_out_write = 1'b1;
    end else begin
        kernel_val_1_V_0_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_val_1_V_1_out_blk_n = kernel_val_1_V_1_out_full_n;
    end else begin
        kernel_val_1_V_1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_2_out_full_n == 1'b0) | (kernel_val_2_V_1_out_full_n == 1'b0) | (ap_start == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_val_1_V_1_out_write = 1'b1;
    end else begin
        kernel_val_1_V_1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_val_1_V_2_out_blk_n = kernel_val_1_V_2_out_full_n;
    end else begin
        kernel_val_1_V_2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_2_out_full_n == 1'b0) | (kernel_val_2_V_1_out_full_n == 1'b0) | (ap_start == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_val_1_V_2_out_write = 1'b1;
    end else begin
        kernel_val_1_V_2_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_val_2_V_0_out_blk_n = kernel_val_2_V_0_out_full_n;
    end else begin
        kernel_val_2_V_0_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_2_out_full_n == 1'b0) | (kernel_val_2_V_1_out_full_n == 1'b0) | (ap_start == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_val_2_V_0_out_write = 1'b1;
    end else begin
        kernel_val_2_V_0_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_val_2_V_1_out_blk_n = kernel_val_2_V_1_out_full_n;
    end else begin
        kernel_val_2_V_1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_2_out_full_n == 1'b0) | (kernel_val_2_V_1_out_full_n == 1'b0) | (ap_start == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_val_2_V_1_out_write = 1'b1;
    end else begin
        kernel_val_2_V_1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_val_2_V_2_out_blk_n = kernel_val_2_V_2_out_full_n;
    end else begin
        kernel_val_2_V_2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_2_out_full_n == 1'b0) | (kernel_val_2_V_1_out_full_n == 1'b0) | (ap_start == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_val_2_V_2_out_write = 1'b1;
    end else begin
        kernel_val_2_V_2_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((kernel_val_2_V_2_out_full_n == 1'b0) | (kernel_val_2_V_1_out_full_n == 1'b0) | (ap_start == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign kernel_val_0_V_0_out_din = r11_V[24:0];

assign kernel_val_0_V_1_out_din = r12_V[24:0];

assign kernel_val_0_V_2_out_din = r13_V[24:0];

assign kernel_val_1_V_0_out_din = r21_V[24:0];

assign kernel_val_1_V_1_out_din = r22_V[24:0];

assign kernel_val_1_V_2_out_din = r23_V[24:0];

assign kernel_val_2_V_0_out_din = r31_V[24:0];

assign kernel_val_2_V_1_out_din = r32_V[24:0];

assign kernel_val_2_V_2_out_din = r33_V[24:0];

endmodule //Block_proc
