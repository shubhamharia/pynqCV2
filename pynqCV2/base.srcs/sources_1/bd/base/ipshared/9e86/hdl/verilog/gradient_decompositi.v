// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gradient_decompositi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        gx_rows_V,
        gx_cols_V,
        gx_data_stream_V_dout,
        gx_data_stream_V_empty_n,
        gx_data_stream_V_read,
        gy_data_stream_V_dout,
        gy_data_stream_V_empty_n,
        gy_data_stream_V_read,
        gd_data_stream_V_din,
        gd_data_stream_V_full_n,
        gd_data_stream_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state9 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] gx_rows_V;
input  [31:0] gx_cols_V;
input  [15:0] gx_data_stream_V_dout;
input   gx_data_stream_V_empty_n;
output   gx_data_stream_V_read;
input  [15:0] gy_data_stream_V_dout;
input   gy_data_stream_V_empty_n;
output   gy_data_stream_V_read;
output  [15:0] gd_data_stream_V_din;
input   gd_data_stream_V_full_n;
output   gd_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg gx_data_stream_V_read;
reg gy_data_stream_V_read;
reg gd_data_stream_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gx_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_631;
reg    gy_data_stream_V_blk_n;
reg    gd_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] ap_reg_pp0_iter4_exitcond_reg_631;
reg   [31:0] t_V_3_reg_176;
reg    ap_block_state1;
wire   [0:0] exitcond8_fu_187_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] i_V_fu_192_p2;
reg   [31:0] i_V_reg_626;
wire   [0:0] exitcond_fu_198_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_state8_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_reg_631;
reg   [0:0] ap_reg_pp0_iter2_exitcond_reg_631;
reg   [0:0] ap_reg_pp0_iter3_exitcond_reg_631;
wire   [31:0] j_V_fu_203_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] tmp_70_reg_640;
reg   [15:0] tmp_71_reg_651;
wire   [15:0] abs_gx_fu_219_p3;
reg   [15:0] abs_gx_reg_662;
wire   [13:0] tmp_fu_226_p1;
reg   [13:0] tmp_reg_671;
wire   [15:0] abs_gy_fu_240_p3;
reg   [15:0] abs_gy_reg_676;
wire   [13:0] tmp_54_fu_247_p1;
reg   [13:0] tmp_54_reg_685;
wire   [0:0] or_cond9_fu_288_p2;
reg   [0:0] or_cond9_reg_690;
reg   [0:0] ap_reg_pp0_iter3_or_cond9_reg_690;
wire   [0:0] or_cond4_fu_349_p2;
reg   [0:0] or_cond4_reg_696;
reg   [0:0] ap_reg_pp0_iter3_or_cond4_reg_696;
wire   [0:0] sel_tmp_fu_355_p2;
reg   [0:0] sel_tmp_reg_702;
reg   [0:0] ap_reg_pp0_iter3_sel_tmp_reg_702;
wire   [0:0] tmp_51_fu_361_p2;
reg   [0:0] tmp_51_reg_708;
wire   [0:0] tmp_60_fu_417_p2;
reg   [0:0] tmp_60_reg_716;
wire   [0:0] ult_fu_461_p2;
reg   [0:0] ult_reg_722;
wire   [0:0] tmp_67_fu_471_p2;
reg   [0:0] tmp_67_reg_727;
wire   [13:0] abs_g_fu_477_p2;
reg   [13:0] abs_g_reg_732;
reg   [13:0] ap_reg_pp0_iter4_abs_g_reg_732;
wire   [1:0] dir_g_7_fu_597_p3;
reg   [1:0] dir_g_7_reg_737;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg   [31:0] t_V_reg_165;
wire    ap_CS_fsm_state9;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] abscond_i_fu_214_p2;
wire   [15:0] neg_i_fu_209_p2;
wire   [0:0] abscond_i8_fu_235_p2;
wire   [15:0] neg_i7_fu_230_p2;
wire   [0:0] tmp_55_fu_251_p3;
wire   [0:0] rev_fu_258_p2;
wire   [15:0] tmp_52_fu_276_p2;
wire   [0:0] or_cond8_fu_270_p2;
wire   [0:0] tmp_56_fu_280_p3;
wire   [0:0] tmp_57_fu_294_p3;
wire   [0:0] tmp_53_fu_301_p2;
wire   [0:0] tmp_61_fu_312_p3;
wire   [0:0] tmp_62_fu_325_p3;
wire   [0:0] rev9_fu_319_p2;
wire   [0:0] tmp_63_fu_338_p2;
wire   [0:0] or_cond2_fu_332_p2;
wire   [0:0] or_cond3_fu_343_p2;
wire   [0:0] or_cond_fu_264_p2;
wire   [0:0] or_cond1_fu_306_p2;
wire   [17:0] p_shl5_fu_368_p3;
wire   [18:0] tmp_100_cast1_fu_365_p1;
wire   [18:0] p_shl5_cast_fu_375_p1;
wire   [18:0] tmp_58_fu_379_p2;
wire   [19:0] p_shl3_fu_389_p3;
wire   [17:0] p_shl4_fu_400_p3;
wire   [20:0] p_shl3_cast_fu_396_p1;
wire   [20:0] p_shl4_cast_fu_407_p1;
wire   [20:0] tmp_101_cast_fu_385_p1;
wire   [20:0] tmp_59_fu_411_p2;
wire   [18:0] tmp_108_cast1_fu_423_p1;
wire   [18:0] p_shl2_cast_fu_426_p1;
wire   [18:0] tmp_64_fu_430_p2;
wire   [19:0] p_shl_fu_440_p3;
wire   [20:0] p_shl_cast_fu_447_p1;
wire   [20:0] p_shl1_cast_fu_451_p1;
wire   [20:0] tmp_65_fu_455_p2;
wire   [20:0] tmp_109_cast_fu_436_p1;
wire   [15:0] tmp_66_fu_467_p2;
wire   [0:0] rev10_fu_488_p2;
wire   [0:0] sel_tmp3_fu_512_p2;
wire   [1:0] dir_g_cast_fu_493_p1;
wire   [1:0] dir_g_3_cast_fu_504_p3;
wire   [0:0] sel_tmp5_fu_524_p2;
wire   [0:0] sel_tmp6_fu_529_p2;
wire   [1:0] dir_g_1_fu_481_p3;
wire   [1:0] sel_tmp4_fu_516_p3;
wire   [0:0] sel_tmp10_demorgan_fu_542_p2;
wire   [0:0] sel_tmp8_fu_546_p2;
wire   [0:0] sel_tmp9_fu_552_p2;
wire   [1:0] dir_g_2_fu_497_p3;
wire   [1:0] sel_tmp7_fu_534_p3;
wire   [0:0] tmp25_fu_565_p2;
wire   [0:0] sel_tmp21_demorgan_fu_575_p2;
wire   [0:0] sel_tmp2_fu_570_p2;
wire   [0:0] sel_tmp10_fu_580_p2;
wire   [0:0] sel_tmp11_fu_586_p2;
wire   [0:0] sel_tmp12_fu_592_p2;
wire   [1:0] sel_tmp1_fu_557_p3;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond8_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond8_fu_187_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((exitcond8_fu_187_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_187_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_3_reg_176 <= 32'd0;
    end else if (((exitcond_fu_198_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_3_reg_176 <= j_V_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        t_V_reg_165 <= i_V_reg_626;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_165 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_exitcond_reg_631 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        abs_g_reg_732 <= abs_g_fu_477_p2;
        tmp_51_reg_708 <= tmp_51_fu_361_p2;
        tmp_60_reg_716 <= tmp_60_fu_417_p2;
        tmp_67_reg_727 <= tmp_67_fu_471_p2;
        ult_reg_722 <= ult_fu_461_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond_reg_631 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        abs_gx_reg_662 <= abs_gx_fu_219_p3;
        abs_gy_reg_676 <= abs_gy_fu_240_p3;
        or_cond4_reg_696 <= or_cond4_fu_349_p2;
        or_cond9_reg_690 <= or_cond9_fu_288_p2;
        sel_tmp_reg_702 <= sel_tmp_fu_355_p2;
        tmp_54_reg_685 <= tmp_54_fu_247_p1;
        tmp_reg_671 <= tmp_fu_226_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_reg_pp0_iter1_exitcond_reg_631 <= exitcond_reg_631;
        exitcond_reg_631 <= exitcond_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_exitcond_reg_631 <= ap_reg_pp0_iter1_exitcond_reg_631;
        ap_reg_pp0_iter3_exitcond_reg_631 <= ap_reg_pp0_iter2_exitcond_reg_631;
        ap_reg_pp0_iter3_or_cond4_reg_696 <= or_cond4_reg_696;
        ap_reg_pp0_iter3_or_cond9_reg_690 <= or_cond9_reg_690;
        ap_reg_pp0_iter3_sel_tmp_reg_702 <= sel_tmp_reg_702;
        ap_reg_pp0_iter4_abs_g_reg_732 <= abs_g_reg_732;
        ap_reg_pp0_iter4_exitcond_reg_631 <= ap_reg_pp0_iter3_exitcond_reg_631;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter3_exitcond_reg_631 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dir_g_7_reg_737 <= dir_g_7_fu_597_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_626 <= i_V_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_631 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_70_reg_640 <= gx_data_stream_V_dout;
        tmp_71_reg_651 <= gy_data_stream_V_dout;
    end
end

always @ (*) begin
    if ((exitcond_fu_198_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond8_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond8_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter4_exitcond_reg_631 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        gd_data_stream_V_blk_n = gd_data_stream_V_full_n;
    end else begin
        gd_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter4_exitcond_reg_631 == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gd_data_stream_V_write = 1'b1;
    end else begin
        gd_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_631 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gx_data_stream_V_blk_n = gx_data_stream_V_empty_n;
    end else begin
        gx_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_631 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gx_data_stream_V_read = 1'b1;
    end else begin
        gx_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_631 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gy_data_stream_V_blk_n = gy_data_stream_V_empty_n;
    end else begin
        gy_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_631 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gy_data_stream_V_read = 1'b1;
    end else begin
        gy_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond8_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_fu_198_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_fu_198_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs_g_fu_477_p2 = (tmp_54_reg_685 + tmp_reg_671);

assign abs_gx_fu_219_p3 = ((abscond_i_fu_214_p2[0:0] === 1'b1) ? tmp_70_reg_640 : neg_i_fu_209_p2);

assign abs_gy_fu_240_p3 = ((abscond_i8_fu_235_p2[0:0] === 1'b1) ? tmp_71_reg_651 : neg_i7_fu_230_p2);

assign abscond_i8_fu_235_p2 = (($signed(tmp_71_reg_651) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign abscond_i_fu_214_p2 = (($signed(tmp_70_reg_640) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_reg_pp0_iter4_exitcond_reg_631 == 1'd0) & (gd_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_631 == 1'd0) & (gy_data_stream_V_empty_n == 1'b0)) | ((exitcond_reg_631 == 1'd0) & (gx_data_stream_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_reg_pp0_iter4_exitcond_reg_631 == 1'd0) & (gd_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_631 == 1'd0) & (gy_data_stream_V_empty_n == 1'b0)) | ((exitcond_reg_631 == 1'd0) & (gx_data_stream_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_reg_pp0_iter4_exitcond_reg_631 == 1'd0) & (gd_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_631 == 1'd0) & (gy_data_stream_V_empty_n == 1'b0)) | ((exitcond_reg_631 == 1'd0) & (gx_data_stream_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((exitcond_reg_631 == 1'd0) & (gy_data_stream_V_empty_n == 1'b0)) | ((exitcond_reg_631 == 1'd0) & (gx_data_stream_V_empty_n == 1'b0)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter5 = ((ap_reg_pp0_iter4_exitcond_reg_631 == 1'd0) & (gd_data_stream_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dir_g_1_fu_481_p3 = ((tmp_60_reg_716[0:0] === 1'b1) ? 2'd2 : 2'd1);

assign dir_g_2_fu_497_p3 = ((tmp_60_reg_716[0:0] === 1'b1) ? 2'd2 : 2'd3);

assign dir_g_3_cast_fu_504_p3 = ((rev10_fu_488_p2[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign dir_g_7_fu_597_p3 = ((sel_tmp12_fu_592_p2[0:0] === 1'b1) ? 2'd0 : sel_tmp1_fu_557_p3);

assign dir_g_cast_fu_493_p1 = rev10_fu_488_p2;

assign exitcond8_fu_187_p2 = ((t_V_reg_165 == gx_rows_V) ? 1'b1 : 1'b0);

assign exitcond_fu_198_p2 = ((t_V_3_reg_176 == gx_cols_V) ? 1'b1 : 1'b0);

assign gd_data_stream_V_din = {{ap_reg_pp0_iter4_abs_g_reg_732}, {dir_g_7_reg_737}};

assign i_V_fu_192_p2 = (t_V_reg_165 + 32'd1);

assign j_V_fu_203_p2 = (t_V_3_reg_176 + 32'd1);

assign neg_i7_fu_230_p2 = (16'd0 - tmp_71_reg_651);

assign neg_i_fu_209_p2 = (16'd0 - tmp_70_reg_640);

assign or_cond1_fu_306_p2 = (tmp_57_fu_294_p3 & tmp_53_fu_301_p2);

assign or_cond2_fu_332_p2 = (tmp_62_fu_325_p3 & rev9_fu_319_p2);

assign or_cond3_fu_343_p2 = (tmp_63_fu_338_p2 & abscond_i8_fu_235_p2);

assign or_cond4_fu_349_p2 = (or_cond3_fu_343_p2 | or_cond2_fu_332_p2);

assign or_cond8_fu_270_p2 = (abscond_i_fu_214_p2 & abscond_i8_fu_235_p2);

assign or_cond9_fu_288_p2 = (tmp_56_fu_280_p3 | or_cond8_fu_270_p2);

assign or_cond_fu_264_p2 = (rev_fu_258_p2 & abscond_i_fu_214_p2);

assign p_shl1_cast_fu_451_p1 = p_shl5_fu_368_p3;

assign p_shl2_cast_fu_426_p1 = p_shl4_fu_400_p3;

assign p_shl3_cast_fu_396_p1 = p_shl3_fu_389_p3;

assign p_shl3_fu_389_p3 = {{abs_gx_reg_662}, {4'd0}};

assign p_shl4_cast_fu_407_p1 = p_shl4_fu_400_p3;

assign p_shl4_fu_400_p3 = {{abs_gx_reg_662}, {2'd0}};

assign p_shl5_cast_fu_375_p1 = p_shl5_fu_368_p3;

assign p_shl5_fu_368_p3 = {{abs_gy_reg_676}, {2'd0}};

assign p_shl_cast_fu_447_p1 = p_shl_fu_440_p3;

assign p_shl_fu_440_p3 = {{abs_gy_reg_676}, {4'd0}};

assign rev10_fu_488_p2 = (ult_reg_722 ^ 1'd1);

assign rev9_fu_319_p2 = (tmp_61_fu_312_p3 ^ 1'd1);

assign rev_fu_258_p2 = (tmp_55_fu_251_p3 ^ 1'd1);

assign sel_tmp10_demorgan_fu_542_p2 = (tmp_51_reg_708 | ap_reg_pp0_iter3_or_cond9_reg_690);

assign sel_tmp10_fu_580_p2 = (sel_tmp21_demorgan_fu_575_p2 ^ 1'd1);

assign sel_tmp11_fu_586_p2 = (sel_tmp2_fu_570_p2 | sel_tmp10_fu_580_p2);

assign sel_tmp12_fu_592_p2 = (tmp_67_reg_727 & sel_tmp11_fu_586_p2);

assign sel_tmp1_fu_557_p3 = ((sel_tmp9_fu_552_p2[0:0] === 1'b1) ? dir_g_2_fu_497_p3 : sel_tmp7_fu_534_p3);

assign sel_tmp21_demorgan_fu_575_p2 = (sel_tmp10_demorgan_fu_542_p2 | ap_reg_pp0_iter3_or_cond4_reg_696);

assign sel_tmp2_fu_570_p2 = (tmp_51_reg_708 & tmp25_fu_565_p2);

assign sel_tmp3_fu_512_p2 = (tmp_51_reg_708 & ap_reg_pp0_iter3_sel_tmp_reg_702);

assign sel_tmp4_fu_516_p3 = ((sel_tmp3_fu_512_p2[0:0] === 1'b1) ? dir_g_cast_fu_493_p1 : dir_g_3_cast_fu_504_p3);

assign sel_tmp5_fu_524_p2 = (tmp_51_reg_708 ^ 1'd1);

assign sel_tmp6_fu_529_p2 = (sel_tmp5_fu_524_p2 & ap_reg_pp0_iter3_or_cond9_reg_690);

assign sel_tmp7_fu_534_p3 = ((sel_tmp6_fu_529_p2[0:0] === 1'b1) ? dir_g_1_fu_481_p3 : sel_tmp4_fu_516_p3);

assign sel_tmp8_fu_546_p2 = (sel_tmp10_demorgan_fu_542_p2 ^ 1'd1);

assign sel_tmp9_fu_552_p2 = (sel_tmp8_fu_546_p2 & ap_reg_pp0_iter3_or_cond4_reg_696);

assign sel_tmp_fu_355_p2 = (or_cond_fu_264_p2 | or_cond1_fu_306_p2);

assign tmp25_fu_565_p2 = (ap_reg_pp0_iter3_sel_tmp_reg_702 ^ 1'd1);

assign tmp_100_cast1_fu_365_p1 = abs_gy_reg_676;

assign tmp_101_cast_fu_385_p1 = tmp_58_fu_379_p2;

assign tmp_108_cast1_fu_423_p1 = abs_gx_reg_662;

assign tmp_109_cast_fu_436_p1 = tmp_64_fu_430_p2;

assign tmp_51_fu_361_p2 = ((abs_gx_reg_662 > abs_gy_reg_676) ? 1'b1 : 1'b0);

assign tmp_52_fu_276_p2 = (tmp_71_reg_651 & tmp_70_reg_640);

assign tmp_53_fu_301_p2 = (($signed(tmp_71_reg_651) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign tmp_54_fu_247_p1 = abs_gy_fu_240_p3[13:0];

assign tmp_55_fu_251_p3 = tmp_71_reg_651[32'd15];

assign tmp_56_fu_280_p3 = tmp_52_fu_276_p2[32'd15];

assign tmp_57_fu_294_p3 = tmp_70_reg_640[32'd15];

assign tmp_58_fu_379_p2 = (tmp_100_cast1_fu_365_p1 + p_shl5_cast_fu_375_p1);

assign tmp_59_fu_411_p2 = (p_shl3_cast_fu_396_p1 - p_shl4_cast_fu_407_p1);

assign tmp_60_fu_417_p2 = ((tmp_101_cast_fu_385_p1 > tmp_59_fu_411_p2) ? 1'b1 : 1'b0);

assign tmp_61_fu_312_p3 = tmp_70_reg_640[32'd15];

assign tmp_62_fu_325_p3 = tmp_71_reg_651[32'd15];

assign tmp_63_fu_338_p2 = (($signed(tmp_70_reg_640) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign tmp_64_fu_430_p2 = (tmp_108_cast1_fu_423_p1 + p_shl2_cast_fu_426_p1);

assign tmp_65_fu_455_p2 = (p_shl_cast_fu_447_p1 - p_shl1_cast_fu_451_p1);

assign tmp_66_fu_467_p2 = (abs_gy_reg_676 | abs_gx_reg_662);

assign tmp_67_fu_471_p2 = ((tmp_66_fu_467_p2 == 16'd0) ? 1'b1 : 1'b0);

assign tmp_fu_226_p1 = abs_gx_fu_219_p3[13:0];

assign ult_fu_461_p2 = ((tmp_65_fu_455_p2 < tmp_109_cast_fu_436_p1) ? 1'b1 : 1'b0);

endmodule //gradient_decompositi
